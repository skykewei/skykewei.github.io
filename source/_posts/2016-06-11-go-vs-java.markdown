---
layout: post
title: "Go和Java的异同"
date: 2016-06-11 23:01:28 +0800
comments: true
categories: Go
---

Rob said：["Go was designed to help write big programs, written and maintained by big teams."](https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html)

## 相同点 ##


**1 命令式编程语言**
   
   Go和Java都是属于命令式编程语言，与函数式编程语言相区别。我们熟知的著名的编程语言C/C++都是属于命令式编程语言的范畴，[函数式编程](https://en.wikipedia.org/wiki/Functional_programming)语言Erlang非常具有代表性，历史也比较悠久。


**2 静态类型**

   Go和Java都是静态类型语言，就是说变量或者方法的类型在编译时期就可以判断和检查。静态类型和动态类型语言相对于，可以在编译期就可以做类型检查的都是静态类型语言，而动态类型语言却需要等到运行时才可以做类型判断。C/C++,C#都是静态类型，动态类型语言我们也非常熟悉，JavaScript，Ruby和Python都是典型的动态语言。
    
   静态类型语言主要优点在于在编译期可以做类型检查，可以在运行之前发现bug，便于调试。  

<!--more-->

**3 垃圾回收**

   垃圾回收是指Go和Java都有自己的内存垃圾回收器，这一点我们非常容易理解。垃圾回收器是runtime的一部分。

   在这里多扯一点是Java的runtime是用C语言写的，而Go语言在go1.5之前的版本也是使用C语言写的，但自从go1.5之后，go语言不仅使用Go重写了runtime，而且编译器、链接器和汇编器也是使用Go进行了重构，其中编译器和链接器根据Go的创始人大神Rob说是由他们写的程序转换工具，把原来使用C写的编译器转换成Go语言写的程序，然后编译各种优化而成，其中过程非常复杂，非常难。汇编器是由Rob大神使用Go重写的。至于为什么选择转换而不是由Go重新写，Rob回答说是为了保证正确性和便于测试。

**4 内存安全**

   这里说的内存安全是说Go和Java在运行时都有引用nil(Go)和null(Java)检查和访问越界检查，我们在Java程序中可以看到NullPointerException和ArrayIndexOutOfBoundsException最常见的两种异常。   

**5 变量总是初始化**

   Go程序中的不管是使用什么方式声明的变量都是被zero化的，也就是说，如果变量是数值它的值就是0，如果是指针就是nil，如果是bool它的值就是false，这个与Java类定义的类成员变量的初始化时一致的，但是Java方法中定义的变量并不遵循这一规则。   

**6 方法**
   Go和Java都有方法的概念。Java中的方法就是我们所熟知的类中的方法的概念。Go中的方法是拥有接收者的特殊函数。因为Go中还有像C语言中的function的概念。所以Go中func和method是做了区分的。

**7 接口**

  Go中的interface和Java中的interface，都可以起到相似的作用，实际上各自有微妙的不同。   

**8 类型断言**

  在运行时Go可以使用Value.(Type)判断某个Value是否是类型Type的，
  Java可以使用instance of 来达到相似目的。

**9 反射**

  Go和Java都拥有反射机制。在运行时可以获取变量的数据结构。


## 不同点 ##




**1** Go编译生成的是机器代码，而Java编译后生成的是字节码，Go并没有虚拟机。

**2** Go编译时静态链接库的。

**3** Go拥有类型为function的变量。拥有函数闭包

**4** Go的string是内置的，和int float在同一个级别上，而Java的string是建立在其他类型基础之上的。

**5** Go的arrays map 和slice都是内置的

**6** 最后一点也是最重要的一点是，Go内置支持并发。关于Go并发，可以参考我的另一篇博文[Go 并发](http://skykewei.top/blog/2016/05/31/go-concurrency/)

## Go有意不支持的Java中类似特性 ##

**1 没有类的概念**
   
  Go中是没有type system的，也就没有像面向对象语言中的类，子类，继承，重载，多态的概念。创始人解释说Go的设计哲学是使用最少的语言特性去支持更多的功能。参见Rob大神的[Less is exponentially more](https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html)

**2 没有继承机制**

  理由同上

**3 没有构造器**

  Go中的用户定义的数据结构主要是struct类似C中的struct。没有Java中类的构造器的概念，但是Go在声明一个struct变量时，可以使用composite literal达到类似的目的。

**4 没有final关键字**

  Go中有const的关键字，这里的const和我们熟知的又有所不同，功能更加强大。参见[Constants](https://blog.golang.org/constants)

**5 没有异常**

  Go中有err变量用于检测函数中可能出现的错误，程序员需要检查函数返回的err来处理。之所以没有引进异常机制，Go作出解释的其中一个原因是说写try-catch-finally代码非常的丑，极大的影响可读性，代码的可读性在Go的设计中占有非常重要的地位。同时表示在并不致命的异常发生时，程序没有处理的情况下并不应该退出程序。

**6 没有注解**

  没有Java中的annotation，我们知道著名的Java框架spring，hibernate等大量运用了annotation特性。在Java语言中是非常有用的。

**7 没有用户定义的泛型**

  Go也是有泛型的运用的。内置的map就是典型的泛型数据结构。之所以不容程序员去定义自己的泛型，是因为没有必要去引进不必要的复杂的特性，可以使用其他特性组合达到类似的目的



**参考链接**


[Less is exponentially more (Pike, 2012)](http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html)

[Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)](http://talks.golang.org/2012/splash.article)