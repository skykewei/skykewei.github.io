<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go | WenShu's Blog]]></title>
  <link href="http://skykewei.top/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://skykewei.top/"/>
  <updated>2016-06-15T13:34:10+08:00</updated>
  <id>http://skykewei.top/</id>
  <author>
    <name><![CDATA[WenShu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go和Java的异同]]></title>
    <link href="http://skykewei.top/blog/2016/06/11/go-vs-java/"/>
    <updated>2016-06-11T23:01:28+08:00</updated>
    <id>http://skykewei.top/blog/2016/06/11/go-vs-java</id>
    <content type="html"><![CDATA[<p>Rob said：<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">&ldquo;Go was designed to help write big programs, written and maintained by big teams.&rdquo;</a></p>

<h2>相同点</h2>

<p><strong>1 命令式编程语言</strong></p>

<p>   Go和Java都是属于命令式编程语言，与函数式编程语言相区别。我们熟知的著名的编程语言C/C++都是属于命令式编程语言的范畴，<a href="https://en.wikipedia.org/wiki/Functional_programming">函数式编程</a>语言Erlang非常具有代表性，历史也比较悠久。</p>

<p><strong>2 静态类型</strong></p>

<p>   Go和Java都是静态类型语言，就是说变量或者方法的类型在编译时期就可以判断和检查。静态类型和动态类型语言相对于，可以在编译期就可以做类型检查的都是静态类型语言，而动态类型语言却需要等到运行时才可以做类型判断。C/C++,C#都是静态类型，动态类型语言我们也非常熟悉，JavaScript，Ruby和Python都是典型的动态语言。</p>

<p>   静态类型语言主要优点在于在编译期可以做类型检查，可以在运行之前发现bug，便于调试。</p>

<!--more-->


<p><strong>3 垃圾回收</strong></p>

<p>   垃圾回收是指Go和Java都有自己的内存垃圾回收器，这一点我们非常容易理解。垃圾回收器是runtime的一部分。</p>

<p>   在这里多扯一点是Java的runtime是用C语言写的，而Go语言在go1.5之前的版本也是使用C语言写的，但自从go1.5之后，go语言不仅使用Go重写了runtime，而且编译器、链接器和汇编器也是使用Go进行了重构，其中编译器和链接器根据Go的创始人大神Rob说是由他们写的程序转换工具，把原来使用C写的编译器转换成Go语言写的程序，然后编译各种优化而成，其中过程非常复杂，非常难。汇编器是由Rob大神使用Go重写的。至于为什么选择转换而不是由Go重新写，Rob回答说是为了保证正确性和便于测试。</p>

<p><strong>4 内存安全</strong></p>

<p>   这里说的内存安全是说Go和Java在运行时都有引用nil(Go)和null(Java)检查和访问越界检查，我们在Java程序中可以看到NullPointerException和ArrayIndexOutOfBoundsException最常见的两种异常。</p>

<p><strong>5 变量总是初始化</strong></p>

<p>   Go程序中的不管是使用什么方式声明的变量都是被zero化的，也就是说，如果变量是数值它的值就是0，如果是指针就是nil，如果是bool它的值就是false，这个与Java类定义的类成员变量的初始化时一致的，但是Java方法中定义的变量并不遵循这一规则。</p>

<p><strong>6 方法</strong>
   Go和Java都有方法的概念。Java中的方法就是我们所熟知的类中的方法的概念。Go中的方法是拥有接收者的特殊函数。因为Go中还有像C语言中的function的概念。所以Go中func和method是做了区分的。</p>

<p><strong>7 接口</strong></p>

<p>  Go中的interface和Java中的interface，都可以起到相似的作用，实际上各自有微妙的不同。</p>

<p><strong>8 类型断言</strong></p>

<p>  在运行时Go可以使用Value.(Type)判断某个Value是否是类型Type的，
  Java可以使用instance of 来达到相似目的。</p>

<p><strong>9 反射</strong></p>

<p>  Go和Java都拥有反射机制。在运行时可以获取变量的数据结构。</p>

<h2>不同点</h2>

<p><strong>1</strong> Go编译生成的是机器代码，而Java编译后生成的是字节码，Go并没有虚拟机。</p>

<p><strong>2</strong> Go编译时静态链接库的。</p>

<p><strong>3</strong> Go拥有类型为function的变量。拥有函数闭包</p>

<p><strong>4</strong> Go的string是内置的，和int float在同一个级别上，而Java的string是建立在其他类型基础之上的。</p>

<p><strong>5</strong> Go的arrays map 和slice都是内置的</p>

<p><strong>6</strong> 最后一点也是最重要的一点是，Go内置支持并发。关于Go并发，可以参考我的另一篇博文<a href="http://skykewei.top/blog/2016/05/31/go-concurrency/">Go 并发</a></p>

<h2>Go有意不支持的Java中类似特性</h2>

<p><strong>1 没有类的概念</strong></p>

<p>  Go中是没有type system的，也就没有像面向对象语言中的类，子类，继承，重载，多态的概念。创始人解释说Go的设计哲学是使用最少的语言特性去支持更多的功能。参见Rob大神的<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is exponentially more</a></p>

<p><strong>2 没有继承机制</strong></p>

<p>  理由同上</p>

<p><strong>3 没有构造器</strong></p>

<p>  Go中的用户定义的数据结构主要是struct类似C中的struct。没有Java中类的构造器的概念，但是Go在声明一个struct变量时，可以使用composite literal达到类似的目的。</p>

<p><strong>4 没有final关键字</strong></p>

<p>  Go中有const的关键字，这里的const和我们熟知的又有所不同，功能更加强大。参见<a href="https://blog.golang.org/constants">Constants</a></p>

<p><strong>5 没有异常</strong></p>

<p>  Go中有err变量用于检测函数中可能出现的错误，程序员需要检查函数返回的err来处理。之所以没有引进异常机制，Go作出解释的其中一个原因是说写try-catch-finally代码非常的丑，极大的影响可读性，代码的可读性在Go的设计中占有非常重要的地位。同时表示在并不致命的异常发生时，程序没有处理的情况下并不应该退出程序。</p>

<p><strong>6 没有注解</strong></p>

<p>  没有Java中的annotation，我们知道著名的Java框架spring，hibernate等大量运用了annotation特性。在Java语言中是非常有用的。</p>

<p><strong>7 没有用户定义的泛型</strong></p>

<p>  Go也是有泛型的运用的。内置的map就是典型的泛型数据结构。之所以不容程序员去定义自己的泛型，是因为没有必要去引进不必要的复杂的特性，可以使用其他特性组合达到类似的目的</p>

<p><strong>参考链接</strong></p>

<p><a href="http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is exponentially more (Pike, 2012)</a></p>

<p><a href="http://talks.golang.org/2012/splash.article">Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go 并发]]></title>
    <link href="http://skykewei.top/blog/2016/05/31/go-concurrency/"/>
    <updated>2016-05-31T19:59:21+08:00</updated>
    <id>http://skykewei.top/blog/2016/05/31/go-concurrency</id>
    <content type="html"><![CDATA[<p>Go并发是以协程(goroutine)为基础的，那么问题来了。
协程是什么？与线程有什么区别联系？Go为什么选择协程而不是线程？</p>

<h2>协程是什么</h2>

<p>在Go中，你可以使用<code>go f()</code> 发起一个协程。其中<code>f()</code>是Go中的func调用。所以个人认为Go中的协程是一个“函数调用”，是一个执行线。多个“函数调用”之间是并发的关系。</p>

<!--more-->


<h2>协程与线程区别和联系</h2>

<p>不管Go使用什么机制支持并发，但是最终需要拿到底层OS去调用执行，OS才是最终的Go并发的执行者，而我们又知道OS并发靠的是各种process和thread，所以我们可以很自然的想到Go的协程和底层OS的thread或者process之间有一种映射关系。</p>

<p>没错，我们正在进一步接近真相，Go中把协程映射到一组线程上去执行。也就是说多个协程被安排由一个线程去执行。如果熟悉OS调用的童鞋就会知道，进程是OS分配系统资源的基本单位，线程是OS执行调用的基本单位。进程切换和线程切换都需要一定的负载。</p>

<p>Go多个协程由单个线程去执行，但同时又要保证多个协程的并发特性，这是如何做到的？</p>

<p>Go中使用一种叫做<code>segmented stacks</code>的技术做到的，这门技术以后再详谈。</p>

<p>那么当某个协程因为某种原因(I/O调用或者其他阻塞的系统调用)被阻塞的时候，执行该协程的线程会如何做？</p>

<p>执行该协程的线程同样被阻塞，此时的线程是无法继续执行分配到它身上的其他协程了，Go的运行环境会把其他协程调度到其他没有被阻塞的线程中。这样就保障了协程之间的并发性。</p>

<h2>Go为什么选择协程而不是线程？</h2>

<p>我们都知道OS中进程切换和线程切换都会有开销，一般来说，一个进行能够拥有上千个线程,具体多少是受到OS的资源限制的。众所周知，线程之所以出现是因为要解决进行切换开销过大并提高并发性。那么协程在线程之后出现，也是有解决线程切换开销和提高并发性的原因。在同等的资源环境下，可以创建成千上万个协程，但线程也就创建数千个。平均下来，协程切换只需要CPU的3个轻量级指令。</p>

<h1>参考链接</h1>

<p><a href="https://golang.org/doc/faq#goroutines">https://golang.org/doc/faq#goroutines</a></p>

<p><a href="https://golang.org/doc/faq#How_is_the_run_time_support_implemented">https://golang.org/doc/faq#How_is_the_run_time_support_implemented</a></p>

<p>ps.上面两个链接目前都需要科学上网，是Go的官方网站</p>
]]></content>
  </entry>
  
</feed>
