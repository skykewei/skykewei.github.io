<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WenShu's Blog]]></title>
  <link href="http://skykewei.top/atom.xml" rel="self"/>
  <link href="http://skykewei.top/"/>
  <updated>2016-06-15T13:34:10+08:00</updated>
  <id>http://skykewei.top/</id>
  <author>
    <name><![CDATA[WenShu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实用工具]]></title>
    <link href="http://skykewei.top/blog/2016/06/15/tools/"/>
    <updated>2016-06-15T13:32:42+08:00</updated>
    <id>http://skykewei.top/blog/2016/06/15/tools</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://tool.oschina.net/">在线工具</a></li>
<li><a href="http://visualgo.net/">VisuAlgo</a></li>
<li><a href="http://bigocheatsheet.com/">算法复杂度</a></li>
<li><a href="http://man.linuxde.net/">Linux命令大全</a></li>
<li><a href="http://en.cppreference.com/w/">C/C++ Reference</a></li>
<li><a href="http://www.cplusplus.com/">cplusplus</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java内存模型之Happen-Before规则]]></title>
    <link href="http://skykewei.top/blog/2016/06/14/happen-before/"/>
    <updated>2016-06-14T19:59:54+08:00</updated>
    <id>http://skykewei.top/blog/2016/06/14/happen-before</id>
    <content type="html"><![CDATA[<p>Java内存模型是描述在并发环境中多线程之间是如何交互的。其中重要的一部分就是Happen-Before原则，具体如下：</p>

<h2>程序顺序原则</h2>

<p>在线程中，指令重排会保证线程内语句执行的<strong>语义</strong>上的一致性.
注意这里说的是语义上的一致性，而不是程序语句上的一致性。</p>

<pre><code>int a = 0; //语句 1
int b = 1; //语句 2
</code></pre>

<p>上面的代码块从程序语句顺序上讲，语句1在语句2前面，两条语句颠倒顺序成为下面的样子：</p>

<pre><code>int b = 1; //语句 2
int a = 0; //语句 1
</code></pre>

<!--more-->


<p>这前后两个代码块虽然语句顺序不一致，但是在语义上是一致的，因为两个代码段执行完成后变量<code>a</code>和变量<code>b</code>的值是一致的。</p>

<p>指令重排是引起一系列并发问题的重要原因。编译器的指令重排必须保证程序代码段在串行执行中的语义保持一致。</p>

<p>之所以会进行指令重排主要是出于提升程序性能，提高CPU的指令吞吐量的考虑，有兴趣的可以去查阅有关资料。</p>

<p>因此当编译器认为必要的时候，会对程序进行指令重排。</p>

<h2>volatile原则</h2>

<p>Java中用于线程间通信的volatile变量的写会先发生于volatile变量的读，由此保证volatile变量的可见性。
同时在执行有关volatile读写语句之前，会保证在该volitile语句之前的语句全部执行完毕。</p>

<pre><code>volatile boolean ok = false; // 语句 1
int a = 0
int b = 1
//thread 1
a = 2;     //语句 2
b = 3;     //语句 3
ok = true; //语句 4
...
//thread 2
while(!ok){}  //语句 5
System.out.println("a="+a+",b="+b); //语句 6
</code></pre>

<p>上一节中我们提到了指令重排会导致程序语句的执行顺序不一定与你写的代码语句的顺序一致。</p>

<p>上面代码段若语句1中变量<code>ok</code>没有<code>volatile</code>关键字，那么线程1中的语句2、语句3、语句4执行顺序就会被打乱，语句4有可能会被安排在语句2或者语句3之前执行。那么在并发执行环境中，线程2中在语句5处检测到<code>ok==true</code>跳出循环时，语句2和语句3还未执行，变量<code>a</code>和变量<code>b</code>不一定分别为2和3. 有了<code>volatile</code>关键字，语句6输出时，一定会有<code>a=2，b=3</code>.也就是说线程1在语句4之前的所有操作结果对线程2是可见的。</p>

<h2>锁规则</h2>

<p>对于并发中的锁的unlock操作一定发生在锁的lock之前。</p>

<h2>传递性</h2>

<p>如果事件A发生在B之前，事件B发生在C之前，那么事件A一定发生在C之前</p>

<h2>线程开始原则</h2>

<p>Java的线程需要调用start(),方法启动。start()操作必然要在该线程的所有操作之前执行</p>

<h2>线程结束原则</h2>

<p>线程的所有操作都是在该线程正常结束、或者从Thread.join()调用中成功返回，或着调用Thread.isAlive返回false</p>

<h2>中断原则</h2>

<p>一个线程调用另一个线程的interrupt 操作先于被中断的线程发现中断(通过抛出InterruptedException或者调用isInterrupted和interrupted)</p>

<h2>对象终结原则</h2>

<p>一个对象的构造函数的执行完成先于这个对象的finalizer的开始</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go和Java的异同]]></title>
    <link href="http://skykewei.top/blog/2016/06/11/go-vs-java/"/>
    <updated>2016-06-11T23:01:28+08:00</updated>
    <id>http://skykewei.top/blog/2016/06/11/go-vs-java</id>
    <content type="html"><![CDATA[<p>Rob said：<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">&ldquo;Go was designed to help write big programs, written and maintained by big teams.&rdquo;</a></p>

<h2>相同点</h2>

<p><strong>1 命令式编程语言</strong></p>

<p>   Go和Java都是属于命令式编程语言，与函数式编程语言相区别。我们熟知的著名的编程语言C/C++都是属于命令式编程语言的范畴，<a href="https://en.wikipedia.org/wiki/Functional_programming">函数式编程</a>语言Erlang非常具有代表性，历史也比较悠久。</p>

<p><strong>2 静态类型</strong></p>

<p>   Go和Java都是静态类型语言，就是说变量或者方法的类型在编译时期就可以判断和检查。静态类型和动态类型语言相对于，可以在编译期就可以做类型检查的都是静态类型语言，而动态类型语言却需要等到运行时才可以做类型判断。C/C++,C#都是静态类型，动态类型语言我们也非常熟悉，JavaScript，Ruby和Python都是典型的动态语言。</p>

<p>   静态类型语言主要优点在于在编译期可以做类型检查，可以在运行之前发现bug，便于调试。</p>

<!--more-->


<p><strong>3 垃圾回收</strong></p>

<p>   垃圾回收是指Go和Java都有自己的内存垃圾回收器，这一点我们非常容易理解。垃圾回收器是runtime的一部分。</p>

<p>   在这里多扯一点是Java的runtime是用C语言写的，而Go语言在go1.5之前的版本也是使用C语言写的，但自从go1.5之后，go语言不仅使用Go重写了runtime，而且编译器、链接器和汇编器也是使用Go进行了重构，其中编译器和链接器根据Go的创始人大神Rob说是由他们写的程序转换工具，把原来使用C写的编译器转换成Go语言写的程序，然后编译各种优化而成，其中过程非常复杂，非常难。汇编器是由Rob大神使用Go重写的。至于为什么选择转换而不是由Go重新写，Rob回答说是为了保证正确性和便于测试。</p>

<p><strong>4 内存安全</strong></p>

<p>   这里说的内存安全是说Go和Java在运行时都有引用nil(Go)和null(Java)检查和访问越界检查，我们在Java程序中可以看到NullPointerException和ArrayIndexOutOfBoundsException最常见的两种异常。</p>

<p><strong>5 变量总是初始化</strong></p>

<p>   Go程序中的不管是使用什么方式声明的变量都是被zero化的，也就是说，如果变量是数值它的值就是0，如果是指针就是nil，如果是bool它的值就是false，这个与Java类定义的类成员变量的初始化时一致的，但是Java方法中定义的变量并不遵循这一规则。</p>

<p><strong>6 方法</strong>
   Go和Java都有方法的概念。Java中的方法就是我们所熟知的类中的方法的概念。Go中的方法是拥有接收者的特殊函数。因为Go中还有像C语言中的function的概念。所以Go中func和method是做了区分的。</p>

<p><strong>7 接口</strong></p>

<p>  Go中的interface和Java中的interface，都可以起到相似的作用，实际上各自有微妙的不同。</p>

<p><strong>8 类型断言</strong></p>

<p>  在运行时Go可以使用Value.(Type)判断某个Value是否是类型Type的，
  Java可以使用instance of 来达到相似目的。</p>

<p><strong>9 反射</strong></p>

<p>  Go和Java都拥有反射机制。在运行时可以获取变量的数据结构。</p>

<h2>不同点</h2>

<p><strong>1</strong> Go编译生成的是机器代码，而Java编译后生成的是字节码，Go并没有虚拟机。</p>

<p><strong>2</strong> Go编译时静态链接库的。</p>

<p><strong>3</strong> Go拥有类型为function的变量。拥有函数闭包</p>

<p><strong>4</strong> Go的string是内置的，和int float在同一个级别上，而Java的string是建立在其他类型基础之上的。</p>

<p><strong>5</strong> Go的arrays map 和slice都是内置的</p>

<p><strong>6</strong> 最后一点也是最重要的一点是，Go内置支持并发。关于Go并发，可以参考我的另一篇博文<a href="http://skykewei.top/blog/2016/05/31/go-concurrency/">Go 并发</a></p>

<h2>Go有意不支持的Java中类似特性</h2>

<p><strong>1 没有类的概念</strong></p>

<p>  Go中是没有type system的，也就没有像面向对象语言中的类，子类，继承，重载，多态的概念。创始人解释说Go的设计哲学是使用最少的语言特性去支持更多的功能。参见Rob大神的<a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is exponentially more</a></p>

<p><strong>2 没有继承机制</strong></p>

<p>  理由同上</p>

<p><strong>3 没有构造器</strong></p>

<p>  Go中的用户定义的数据结构主要是struct类似C中的struct。没有Java中类的构造器的概念，但是Go在声明一个struct变量时，可以使用composite literal达到类似的目的。</p>

<p><strong>4 没有final关键字</strong></p>

<p>  Go中有const的关键字，这里的const和我们熟知的又有所不同，功能更加强大。参见<a href="https://blog.golang.org/constants">Constants</a></p>

<p><strong>5 没有异常</strong></p>

<p>  Go中有err变量用于检测函数中可能出现的错误，程序员需要检查函数返回的err来处理。之所以没有引进异常机制，Go作出解释的其中一个原因是说写try-catch-finally代码非常的丑，极大的影响可读性，代码的可读性在Go的设计中占有非常重要的地位。同时表示在并不致命的异常发生时，程序没有处理的情况下并不应该退出程序。</p>

<p><strong>6 没有注解</strong></p>

<p>  没有Java中的annotation，我们知道著名的Java框架spring，hibernate等大量运用了annotation特性。在Java语言中是非常有用的。</p>

<p><strong>7 没有用户定义的泛型</strong></p>

<p>  Go也是有泛型的运用的。内置的map就是典型的泛型数据结构。之所以不容程序员去定义自己的泛型，是因为没有必要去引进不必要的复杂的特性，可以使用其他特性组合达到类似的目的</p>

<p><strong>参考链接</strong></p>

<p><a href="http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is exponentially more (Pike, 2012)</a></p>

<p><a href="http://talks.golang.org/2012/splash.article">Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go 并发]]></title>
    <link href="http://skykewei.top/blog/2016/05/31/go-concurrency/"/>
    <updated>2016-05-31T19:59:21+08:00</updated>
    <id>http://skykewei.top/blog/2016/05/31/go-concurrency</id>
    <content type="html"><![CDATA[<p>Go并发是以协程(goroutine)为基础的，那么问题来了。
协程是什么？与线程有什么区别联系？Go为什么选择协程而不是线程？</p>

<h2>协程是什么</h2>

<p>在Go中，你可以使用<code>go f()</code> 发起一个协程。其中<code>f()</code>是Go中的func调用。所以个人认为Go中的协程是一个“函数调用”，是一个执行线。多个“函数调用”之间是并发的关系。</p>

<!--more-->


<h2>协程与线程区别和联系</h2>

<p>不管Go使用什么机制支持并发，但是最终需要拿到底层OS去调用执行，OS才是最终的Go并发的执行者，而我们又知道OS并发靠的是各种process和thread，所以我们可以很自然的想到Go的协程和底层OS的thread或者process之间有一种映射关系。</p>

<p>没错，我们正在进一步接近真相，Go中把协程映射到一组线程上去执行。也就是说多个协程被安排由一个线程去执行。如果熟悉OS调用的童鞋就会知道，进程是OS分配系统资源的基本单位，线程是OS执行调用的基本单位。进程切换和线程切换都需要一定的负载。</p>

<p>Go多个协程由单个线程去执行，但同时又要保证多个协程的并发特性，这是如何做到的？</p>

<p>Go中使用一种叫做<code>segmented stacks</code>的技术做到的，这门技术以后再详谈。</p>

<p>那么当某个协程因为某种原因(I/O调用或者其他阻塞的系统调用)被阻塞的时候，执行该协程的线程会如何做？</p>

<p>执行该协程的线程同样被阻塞，此时的线程是无法继续执行分配到它身上的其他协程了，Go的运行环境会把其他协程调度到其他没有被阻塞的线程中。这样就保障了协程之间的并发性。</p>

<h2>Go为什么选择协程而不是线程？</h2>

<p>我们都知道OS中进程切换和线程切换都会有开销，一般来说，一个进行能够拥有上千个线程,具体多少是受到OS的资源限制的。众所周知，线程之所以出现是因为要解决进行切换开销过大并提高并发性。那么协程在线程之后出现，也是有解决线程切换开销和提高并发性的原因。在同等的资源环境下，可以创建成千上万个协程，但线程也就创建数千个。平均下来，协程切换只需要CPU的3个轻量级指令。</p>

<h1>参考链接</h1>

<p><a href="https://golang.org/doc/faq#goroutines">https://golang.org/doc/faq#goroutines</a></p>

<p><a href="https://golang.org/doc/faq#How_is_the_run_time_support_implemented">https://golang.org/doc/faq#How_is_the_run_time_support_implemented</a></p>

<p>ps.上面两个链接目前都需要科学上网，是Go的官方网站</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[像黑客一样写blog：Ubuntu14.04+Octopress+Github Pages]]></title>
    <link href="http://skykewei.top/blog/2016/04/12/octopress-ubuntu14-dot-04-tutorial/"/>
    <updated>2016-04-12T22:05:23+08:00</updated>
    <id>http://skykewei.top/blog/2016/04/12/octopress-ubuntu14-dot-04-tutorial</id>
    <content type="html"><![CDATA[<p>之前在windows 10 上部署了一套Octopress环境，但是如果要发布博客，就只有在安装了Octopress环境才能发布blog.因为就有了这篇写在Ubuntu14.04系统中的文章。与在windows上安装有些不同，有些需要注意的问题，在这篇文章会指出这些问题，并给出解决办法。希望此篇文章能够为有意在Ubuntu14.04上安装Octopress环境的童鞋提供一个参考操作步骤。如有不准确的地方，还请批评指正。</p>

<blockquote><ul>
<li><strong><em>基本工具介绍</em></strong></li>
<li><strong><em>安装依赖</em></strong></li>
<li><strong><em>安装Octopress</em></strong></li>
<li><strong><em>发布Github Pages</em></strong></li>
<li><strong><em>绑定私有域名</em></strong></li>
<li><strong><em>发布第一篇Blog</em></strong></li>
<li><strong><em>换台电脑继续写博客</em></strong></li>
<li><strong><em>参考链接</em></strong></li>
</ul>
</blockquote>

<!--more-->


<h2>基础工具介绍</h2>

<p>此次环境部署是在使用VMware12pro创建的Ubuntu14.04虚拟机中创建的，关于如何安装创建Ubuntu虚拟机不在本文讨论范围，读者自行咨询<a href="https://www.google.com.hk/search?q=vmware+12+%E8%99%9A%E6%8B%9F%E6%9C%BA+ubuntu+14.04&amp;rlz=1C1CHUN_zh-CNCN651CN651&amp;oq=vmware+12+%E8%99%9A%E6%8B%9F%E6%9C%BA+ubuntu+14.04&amp;aqs=chrome..69i57.941j0j9&amp;sourceid=chrome&amp;ie=UTF-8">谷歌老师</a>。在这里简要介绍一下<a href="http://octopress.org/">Octopress</a>，Markdown，Github Pages和Git。</p>

<h3>Octopress</h3>

<p>Octopress与Wordpress类似，也是搭建个人博客的工具。本人不熟悉Wordpress在此不再赘述。Octopree非常灵活，可定制性非常强，如果熟悉Markdown(一种简单的标记语言，下文简单介绍)以及简单的Ruby语言，就可以自定义实现诸多功能。Octopress主要有三大优势：</p>

<ol>
<li>Octopress完全免费开源。并且可以将Octopress搭建的博客绑定到你个人的Github Pages(也是个人免费的)上，无需额外购买博客服务器。</li>
<li>A blogging framework for hackers. 这是Octopress<a href="http://octopress.org">官网</a>大标题上的一句话。Octopress是专为黑客而生，能够像黑客写代码一样来写博客。</li>
<li>Octopress可以完全定制，可以根据自己的需要充分定制，纯代码生成，同时Octopress拥有庞大的用户社区，如有问题可以在社区中寻求帮助，在搜索引擎中搜索Octopress关键字，可以得到数以亿计的结果，由此可见Octopress是受到诸多人的喜爱和使用的。</li>
</ol>


<h3>Markdown</h3>

<p>Markdown是一种纯文本标记语法，非常简单，完全可以使用系统中的纯文本文件编辑器进行编写。虽然简单，但是却可以生成表现力极强的文档。Octopress中发布的每篇博文都是以<code>.markdown</code> 为后缀命名的。每篇博文都是一个完整的Markdown文档，Markdown非常简单，即使是非IT专业人士也可以非常容易上手，并很快写出格式规范，精彩的文章。虽然Markdown文档可以使用纯文本编辑器编辑书写，但有很多很方便所见即所得的编辑器。在这里推荐几款非常流行的markdown编辑器，<a href="http://markdownpad.com/">MarkdownPad2</a>和作业部落出品的<a href="https://www.zybuluo.com/mdeditor">Cmd Markdown</a>，这些编辑器所即所得并且非常简便易用。在Octopress发布博客时，我们可以使用这些工具编辑我们的<code>.markdown</code>文档，然后保存在<code>/octopress/source/_posts</code>文件夹中，然后运行Octopress生成部署命令发布出去(参见下文)。</p>

<h3>Github Pages和Git</h3>

<p>Github Pages和依托Github平台开发出的一款提供静态网站的产品。<a href="https://github.com/">Github</a>是一个著名的代码托管网站，码农应该没有不知道的。若要使用该产品，首先需要一个<a href="https://github.com/">Github</a>的一个账号。</p>

<p>在有了Github账号后，需要在这个账号中创建一个仓库<code>new repository</code>,此时需要注意，创建的仓库名字格式必须为<code>yourname.github.io</code>,这里的<code>yourname</code>必须是你在Github上的创建账号时使用的用户名，这是受到Github Pages产品服务所限制约定的，否则无法使用Github Pages服务。Github Pages服务根据你创建的仓库名字自动识别为这是一个用来创建Github Pages仓库，也就是说一个Github账号只能创建一个Github Page仓库。之后使用Octopress上传到这个仓库里面所有博客的源代码以及其他所需文档。Octopress如何上传并绑定这个Github Pages仓库，下文分解。</p>

<p>Git是什么？从名字上看就和Github脱不开关系。简要来说Git是一个分布式版本控制系统，Github本身是一个代码托管平台，它所使用的代码管理系统就是Git。如果稍微熟悉Linux操作系统的人，肯定知道一个非常著名的计算机界的传奇人物Linus，他正是Git的创造人，在此致敬！</p>

<p>当你使用Git管理你自己的代码时，你本地电脑上和远程服务器上都有一个完整的代码版本库。通过Git，团队协作时可以非常方便的彼此推送自己修改的部分代码。</p>

<h2>安装依赖</h2>

<p>下面开始接受Octopress安装过程，本文虽然是在Ubuntu14.04系统之上搭建，但是在其他系统Windows，Mac OS也是非常类似的。</p>

<p>首先安装Octopress的依赖软件：<code>ruby</code>，<code>nodejs</code>，<code>git</code>。</p>

<p><strong>安装Ruby</strong></p>

<p>为了安装Ruby，我们使用<a href="https://rvm.io/">Ruby Version Manager</a> (RVM),使用RVM你可以同时安装多个版本的Ruby，可以在不同版本之间非常容易的进行切换。安装Ruby在命令终端输入：</p>

<figure class='code'><figcaption><span>安装RVM　</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -L https://get.rvm.io | bash -s stable --ruby
</span><span class='line'>$ #重启 shell
</span><span class='line'>$ source ~/.rvm/scipts/rvm #实际安装时具体路径可能不同，在命令输出中会有提示，以实际命令输出为准
</span><span class='line'>$ #检查RVM是否安装成功
</span><span class='line'>$ rvm -v
</span><span class='line'>$ #检查Ruby是否安装成功
</span><span class='line'>$ ruby -v</span></code></pre></td></tr></table></div></figure>


<p>如果rvm安装过程中，没有同时安装ruby，可以手动安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm install 2.3.0
</span><span class='line'>$ rvm use 2.3.0
</span><span class='line'>$ rvm rubygems latest</span></code></pre></td></tr></table></div></figure>


<p>此时，ruby环境安装完成。</p>

<p><strong>安装Nodejs</strong></p>

<p>安装<code>nodejs</code>是要给Octopress提供javascrpt编译环境，否则就会出现<code>javascript runtime error</code>。</p>

<pre><code>$ sudo apt-get install nodejs
</code></pre>

<p><strong>安装Git</strong></p>

<p>只有安装了<code>git</code>， Octopress才可以使用git把源代码<code>clone</code>到本地并<code>push</code>到Github。</p>

<pre><code>$ sudo apt-get install git
</code></pre>

<p>我们的博客源代码是被推送到Github Pages的远程仓库的。Octopress是使用Git工具把源代码文件推送到远程仓库，因此本地的octopress需要和远程仓库之间建立一种信任关系，远程Github Pages远程仓库需要确认推送操作实施者有权限执行推送操作。这种信任关系是通过<em>ssh key</em>建立的。简单来说一个<em>ssh key</em> 对应一个授权，当你在多台电脑部署了octopress环境，但有希望多个octopress部署发布同一个Github Pages时，可以在Github账号中添加多个<em>ssh key</em>。</p>

<p>首先，在本地创建<em>ssh key</em>，执行命令：</p>

<pre><code>$ ssh-keygen -t rsa -C "yourmail@example.com"
</code></pre>

<p>特别注意这里的email是你在注册Github账号使用的注册emial地址，方便起见，之后一路回车，不必输入任何东西即可创建一个<em>ssh key</em>。 在<code>~/.ssh</code>目录中可以看到<code>id_rsa</code>和<code>id_ras.pub</code>两个文件，分别是私钥和公钥，私钥不要泄露，否则任何人得到私钥就能对你的远程仓库做任何操作。</p>

<p>需要把公钥<code>id_rsa.pub</code>提交到你的Github账号中。登录你的Github账号，打开<code>Account settings</code>中的<code>SSH keys</code>页面，点击<code>Add SSH Key</code> title可任意填写，在Key的文本框中粘贴<code>id_rsa.pub</code>文件中的所有内容然后保存。此后你就可以在本地使用Git工具push代码到你的Github中了。</p>

<h2>安装Octopress</h2>

<p><strong>1)</strong>首先把Octopress源代码从Github上克隆到本地</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<p>执行此命令后就可以看到在当前目录下有个octopress文件夹，里面就是octopress的源代码文件。</p>

<p><strong>*2)</strong>安装Octopress依赖项</p>

<pre><code>$ gem install bundler
$ bundle install
</code></pre>

<p>至此octopress的相关依赖安装完成。</p>

<p>运行以下命令可以在本地预览博客效果：</p>

<pre><code>$ rake install
$ rake preview
</code></pre>

<p><code>rake</code>是<code>ruby+make</code>的简写。octopress底层是基于ruby编写的jekyll框架的。与octopress操作的命令都会用到rake。
运行命令<code>rake preview</code>后，在浏览器中输入<code>http://localhost:4000</code> 可以在本地预览博客效果。此时会看到一个最基本的页面。</p>

<h2>发布Github Pages</h2>

<p>此时，Octopress博客只是在你本地的浏览器中能够访问到，但我们的目的是把自己的博客发布到外面的互联网上，这样全世界接入互联网的人都能够看到我们自己的博客了。我们选择Github Pages服务来发布我们的博客，使用Octopress可以非常方便的和Github Pages服务进行绑定。</p>

<p>Octopress发布到Github Pages上本质就是把Octopress在本地生成的源代码和静态页面使用Git分布式版本控制系统推送到Github 的Github Pages的仓库<code>yourname.github.io</code>中。 Github 仓库目前同时支持ssh和https协议的url。在你的仓库中，可以看到<code>git@github.com:yourname/yourname.github.io.git</code>和<code>https://github.com/yourname/yourname.github.io.git</code>类似的url。Octopress可以任选其中之一进行绑定。运行下面命令：</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<p>之后会提示你输入前面提到的url，任选其中一种输入即可。</p>

<p>在执行下面命令：</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>也可执行：</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>这个命令是相当于你执行上面两条命令，是一种简写方式。</p>

<p>现在任何人都可以在浏览器中输入网址<code>yourname.github.io</code> 访问你自己刚刚搭建的博客了。</p>

<blockquote><p>再说说两者之间绑定的原理，在执行<code>rake setup_github_pages</code>命令之后，octopress文件夹中会多一个<em>deploy 目录，在你未修改任何与octopress相关主题或者增加博文之前，里面只有一个<code>index.html</code>文件，也就是默认主题的首页。里面的内容都是octopress源码编译之后生成的目标文件，</em>deploy 目录被当做master分支，请注意，在github中创建的<code>username/username.github.io</code>仓库中也有一个默认称为master 的分支，octopress仓库中除了<em>deploy 目录外，其它都被octopress当做source 分支，关于git技术中分支的概念，可自行查询前文git相关文档介绍。octopress的思想就是在source 分支保存整个框架所需要的文件以及写的博文<code>.markdown</code>文件，将每次生成的html文件全部放进</em>deploy目录中，再将<em>deploy目录所有的文件推送到github pages仓库中，这时便可通过<code>username.github.io</code>访问到生成好的html文件，也就是</em>deploy目录中的文件，至于其它source 分支文件，也可以推送到github中备份，此过程不影响octopress的生成效果，只是防止本地文件丢失无法恢复带来的不良后果，可执行以下代码完成source分支的备份：</p></blockquote>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'> $ git commit -m &lsquo;commit message&rsquo;
</span><span class='line'> $ git push origin source</span></code></pre></td></tr></table></div></figure></p>

<blockquote><p>另外，rake generate 做的实质是把octopress框架生成的文件放进octopress/public 文件夹中，rake deploy 做的实质是将octopress/public 中的文件拷贝到octopress/_deploy 文件夹中并将其中的文件推送到username.github.io 仓库中。</p></blockquote>

<h2>绑定私有域名</h2>

<p>目前你可以使用<code>yourname.github.io</code>这样的二级域名访问你自己的博客。当然你也可以绑定自己购买的域名。具体域名购买方式请咨询<a href="https://www.google.com.hk/search?q=%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0&amp;oq=%E5%9F%9F%E5%90%8D%E8%B4%AD%E4%B9%B0">谷歌老师</a>,这里假设你已经购买了一个域名<code>yourname.org</code>
,下面就需要把这个域名地址指向你刚刚搭建好的博客<code>yourname.github.io</code>. 首先在本地目录octopress/source/下面新建一个名为<code>CNAME</code>的文本文件，写入<code>yourname.org</code> ，在执行octopress部署命令<code>rake gen_deploy</code> 发布到Github Pages中，此时还无法使用你的域名访问。下一步需要把你的域名解析指向你的Github Pages所在服务器的IP地址。执行下面命令获取IP地址：</p>

<pre><code> $ ping yourname.github.io
</code></pre>

<p>之后登陆你购买域名的管理中心，找到域名解析的配置项。具体细节不再赘述。至此，你就拥有了一个可以使用自己购买域名访问的博客了。</p>

<h2>发布第一篇Blog</h2>

<p>执行下面命令：</p>

<pre><code>$ rake new_post["Post Tile"]
</code></pre>

<p>会在<code>octopress/source/_posts</code>目录下生产一个名称为<code>yyyy-mm-dd-Post-Tile.markdown</code>的Markdown文件。这个文件就是你要发布的博文的具体内容。编辑完成这个文档后执行命令：</p>

<pre><code>$ rake gen_deploy
</code></pre>

<p>再次在浏览器中输入你的域名就能访问你刚刚写的博文了。Exciting！</p>

<p>此时你的远程Github Pages仓库是没有你的本地octopress所有源代码的，如果你的本地电脑因为不当操作造成octopress源文件的损坏，很可能就会无法继续发布博文了，保险起见，执行如下命令把octopress所有的源文件推送到远程仓库中,在octopress目录下</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'> $ git commit -m &lsquo;commit message&rsquo;
</span><span class='line'> $ git push -u origin source</span></code></pre></td></tr></table></div></figure></p>

<h2>换台电脑继续写博客</h2>

<p>如果只是到此为止，那么你发布博文都只能通过当前使用的电脑进行。如果想换一台电脑怎么做呢？这也很简单，详情如下。</p>

<p>1 首先要确保每次修改本地内容后都提交到了Github Pages远程仓库的source分支中。 并且切换后的当前的电脑有octopress的依赖环境，详情请看前文。</p>

<p>2 执行下面命令：</p>

<p> <figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:yourname/yourname.github.io.git
</span><span class='line'> $ cd yourname.github.io
</span><span class='line'> $ git checkout source</span></code></pre></td></tr></table></div></figure></p>

<p>  之后就可以像前文操作一样发布博文了。</p>

<p>3 如果想要换回原来电脑，此时一定要记得每次修改本地内容后都要在octopress顶层目录下执行push操作。</p>

<pre><code>$ git pull origin source
</code></pre>

<p>熟悉Git的童鞋肯定知道上面的操作都是很简单的Git的命令操作。
只需要执行这么简单几个Git命令，就可以在不同的电脑之间来回切换了。</p>

<h2>参考链接</h2>

<p><a href="http://www.chongh.wiki/blog/2015/12/16/octopress-tutorial/">Octopress在Mac下的安装配置</a></p>

<p><a href="http://www.yebangyu.org/blog/2015/10/17/howtoinstalloctopress/">Windows下OctoPress环境搭建</a></p>

<p>上面两篇博文的作者分别是我的好友<a href="http://www.yebangyu.org">邦宇</a> 和 <a href="http://www.chongh.wiki">冲华</a>,本篇博文参考这两篇文章甚多，受益匪浅。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ceph Jewel 功能预览 : 即将到来的新存储BlueStore]]></title>
    <link href="http://skykewei.top/blog/2016/04/10/ceph-a-new-store-is-coming/"/>
    <updated>2016-04-10T20:06:32+08:00</updated>
    <id>http://skykewei.top/blog/2016/04/10/ceph-a-new-store-is-coming</id>
    <content type="html"><![CDATA[<p><em>本文由 Ceph中国社区-文殊 翻译，校稿 。</em></p>

<p>英文出处：<a href="http://www.sebastien-han.fr/blog/2016/03/21/ceph-a-new-store-is-coming/">Ceph Jewel Preview: A New Store Is Coming, BlueStore</a></p>

<p>欢迎加入 <a href="http://7xj5dz.com1.z0.glb.clouddn.com/qun.png">翻译小组</a></p>

<!--more-->


<hr />

<p><img src="http://sebastien-han.fr/images/ceph-blue-store.jpg" alt="" /></p>

<p>BlueStore是一种高效的对象存储技术。</p>

<p>正如以前文章中提到的那样，关于Ceph的技术正在突飞猛进的发展，尤其是有关存储优化的技术更是如此。早在今年初，一个代号为<strong>NewStore</strong>首创项目被启动。那么它究竟是什么呢？</p>

<p>NewStore项目是一种存储实现。它使用<a href="http://rocksdb.org/">RocksDB</a>存储Ceph日志，同时Ceph的真正数据对象存储在文件系统中。如今有了BlueStore技术，数据对象可以无需任何文件系统的接口而直接存储在物理块设备上。</p>

<hr />

<h3>I 背景阐述</h3>

<p>首先来看原本的Ceph中的FileStore有什么问题呢？就像你认为的那样，Ceph存储数据对象像使用传统文件系统存储文件一样，这就是我们对FileStore基本认知。但是如果你想了解更多，请查看我之前发表的一篇文章<a href="http://octopresss.dev/blog/2013/12/02/ceph-performance-interesting-things-going-on/">穹顶之下的Ceph</a>。现在让我们一起探究BlueStore技术出现的背景。</p>

<h3>I.1. 安全事务</h3>

<p>Ceph是一种软件定义存储解决方案，因此Ceph的主要目标是保障你存储数据的安全。为了达到数据安全的目的，我们需要原子特性。然而很不幸，鉴于<code>O_ATOMIC</code>从来没有集成到操作系统的内核当中，目前也就没有一种文件存储系统能够提供写和更新操作的原子特性。 Btrfs拥有原子特性的事务, 这是人们为了解决上述问题作出的尝试，但事实上并不成功。</p>

<p>Ceph开发者不得不探索其他的解决方案。这个解决方案就是你们非常熟悉的Ceph日志。但是写前记录日志这种技术有一个主要缺陷就是它把你的硬盘性能降低到原来的二分之一（仅当日志和OSD数据共享同一个硬盘时）。</p>

<h3>I.2. 对象枚举</h3>

<p>对于Ceph本身来说，在POSIX文件系统上存储数据对象效果并不理想。Ceph使用哈希技术存储数据对象，因此数据对象的名字就会非常奇特，
比如<code>rbdudata.371e5017a72.0000000000000000__head_58D36A14__2</code> 。 对于数据清洗，数据回填，和数据恢复这样的操作，Ceph就需要检索枚举数据对象。但是POSIX对读取目录内容并有序排序没有好的处理方法。正因如此，Ceph开发者最后使用一些小技巧比如数据目录分片到子目录，之后他们才能够列出目录内容，排序并使用。但是这样做的最后结果是又引入了新的消耗。</p>

<h3>II.原理剖析</h3>

<p>下图是BlueStore的整体架构图。</p>

<p><img src="http://sebastien-han.fr/images/ceph-bluestore.png" alt="" /></p>

<p>从抽象分层角度看，BlueStore的基本组成是非常简洁的。下图是BlueStore的深层透视。</p>

<p><img src="http://sebastien-han.fr/images/ceph-inside-bluestore.png" alt="" /></p>

<p>正如我们从图中看到的，BlueStore有一些内部组件，从总体上看，Ceph数据对象(图中所示真正的‘数据’)是直接被写入块物理设备的。因此我们不再需要任何文件系统，BlueStoe直接使用一个原始分区。OSD附带的数据对象元数据被存储到键值数据库RocksDB中。各个分层描述如下：</p>

<ul>
<li> RocksDB， 正如前文提到的，存储预写式日志和元数据（Ceph的omap数据信息）</li>
<li> BlueRocksEnv是与RocksDB交互的接口</li>
<li> BlueFS是使用C++语言开发的小的文件系统，并实现了rocksdb::Env 接口(存储RocksDB日志和sst文件)。因为rocksdb常规来说是运行在文件系统的顶层，下面是BlueFS。 它是数据存储后端层，RocksDB的数据和BlueStore中的真正数据被存储在同一个块物理设备。</li>
</ul>


<p>那么我们使用RocksDB存储什么呢？</p>

<ul>
<li> 数据对象元数据</li>
<li> 预写式日志</li>
<li> Ceph的omap数据信息</li>
<li> 分配器的元数据，分配器负责决定真正的数据应在什么地方存储。同时需要注意的是分配器是可插拔的。</li>
</ul>


<p>现在让我们看一下BlueStore在物理硬盘上的存储模型：</p>

<p><img src="http://sebastien-han.fr/images/bluestore-on-disk.png" alt="" /></p>

<p>总体上看，我们是把一个硬盘分了两个分区：</p>

<ul>
<li>第一个迷你小分区使用了XFS或ext4文件系统。它存储了Ceph文件（像初始系统描述符，状态，id，fsid，钥匙串等），和RocksDB文件(RocksDB元数据和预写式日志)。</li>
<li>第二个分区是没有文件系统的原始分区。</li>
</ul>


<p>BlueStore更深层次的存储模型为：</p>

<p><img src="http://sebastien-han.fr/images/bluestore-on-disk-advanced.png" alt="" /></p>

<p>BlueStore最令人惊叹的是它的灵活性。每一个组件都可以存储在一个不同的物理设备上。在这张图中，RocksDB的预写式日志和数据可以被存储在不同的物理设备也可以存储在迷你小分区上。</p>

<h3>III.关键特性</h3>

<p> 最后总结一下，重点总结BlueStore中的几个最棒的特性：</p>

<ul>
<li> 不再有双倍写入的消耗，因为它首先在块物理上写入数据，然后更新RocksDB的数据对象的元数据，元数据详细说明了驱动设备中的数据对象的位置。</li>
<li> 配置灵活：BlueStore最多可以同时使用3个驱动设备，一个存储数据，一个存储RocksDB的元数据，一个存储RocksDB的预写式日志。因此你可以把HDD配置为存储数据，SSD配置为存储RocksDB元数据和一个非易失内存存储RocksDB的预写式日志。</li>
<li> 原始快物理设备的使用：由于我们数据写入到块物理设备中，没有了写入传统文件系统的额外消耗。同时我们也避免了日志元数据的冗余存储占用，因为传统文件系统有他们自己内部的日志和元数据管理机制。</li>
</ul>


<blockquote><p><em>Ceph Jewel版本一经发布，我们就可以使用Ceph中的BlueStore。 如果我没有搞错的话，BlueStore虽然可用但它是个技术预览版本，我无法肯定我们是否应该在生产环境中使用。为了确认这件事还请仔细阅读它的发布日志。 正如我们所看到的，Ceph在存储驱动方面投入了越来越多的精力。BlueStore使用RocksDB存储日志从而不再需要预写式日志。我还没有对BlueStore做任何基准测试，但是我们定将不再需要专门的存储设备来存储日志。这对于数据中心的管理角度来看无疑极具吸引力。每一个OSD都是独立的，因此它可以由一个服务器上非常简单的迁移到另一个服务器上并可顺利运行。这个特性并不新鲜，如果我没有记错的话，这个特性是在Ceph的Firefly版本在udev系统规则下就被引入的，简单来说，就是当你热插拔系统中的一个新的包含一个OSD的硬盘时，这将触发一个udev事件，该事件将会激活这个OSD。考虑到无需使用专门的设备存储Ceph的日志，依据你的集群的不同目标BlueStore在不同程度上增强了这个特性。无论在同样的存储设备上运行什么，BlueStore的性能至少对成本容量比和吞吐量优化足够。</em></p></blockquote>
]]></content>
  </entry>
  
</feed>
